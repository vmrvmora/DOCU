git init
git status
git add .
# eliminación de un archivo o carpeta del "stage"
git reset .DS_Store
git log
git config --global -e          ### edición vi de las configuraciones globales
git config --global
git commit -m Primer commit

# Extraer el archivo del stage
git reset .DS_Store

git config --global init.defaultBranch main
git config --global user.mail victor.morales@vasscompany.com
# reponer el repositorio a como estaba en ultimo commit
git checkout -- .
git branch
git branch -m master main
git config --list
#Alias
git config --global alias.s status --short
git config --global alias.lg "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"

# Eliminiación avisos de LF...
git config core.autocrlf true


# Edición del último commit
git commit --amend

# stage y commit
git commit -am "Agregamos a Linterna Verde"

## Deshacer un commit para añadirle modificaciones añadidas de nuevo
git commit -am "Heroes.md: agregamos Linterna verde"
git reset --soft 73584f ....puntero previo al HEAD


# deshacer commits hasta un cierto puntero
* d16c757 - (62 seconds ago) Heroes.md: agregamos Linterna verde y ROBIN - vmrvmora (HEAD -> main)
* 73584f0 - (87 minutes ago) Agregamos historia batman y superman - vmrvmora
* af07a98 - (88 minutes ago) Agregamos ciudades - vmrvmora
* 7bbed87 - (89 minutes ago) Agregamos heroes - vmrvmora
* 412e685 - (2 hours ago) Agregamos misiones - vmrvmora
* ca98f4f - (2 hours ago) Readme agregado - vmrvmora


git reset --mixed af07a98
git lg
* af07a98 - (2 hours ago) Agregamos ciudades - vmrvmora (HEAD -> main)
* 7bbed87 - (2 hours ago) Agregamos heroes - vmrvmora
* 412e685 - (2 hours ago) Agregamos misiones - vmrvmora
* ca98f4f - (2 hours ago) Readme agregado - vmrvmora


# Borrado de los cambios hasta cierto punto
git reset --hard af07a98


# Listar todos los cambios
# Recuperación cambios borrados con reset hard
git reflog

412e685 (HEAD -> main) HEAD@{0}: reset: moving to 412e685
7bbed87 HEAD@{1}: reset: moving to 7bbed87
af07a98 HEAD@{2}: reset: moving to af07a98
af07a98 HEAD@{3}: reset: moving to af07a98
d16c757 HEAD@{4}: commit: Heroes.md: agregamos Linterna verde y ROBIN
73584f0 HEAD@{5}: reset: moving to 73584f0
0ce9240 HEAD@{6}: commit (amend): Heroes.md: Agregamos a Linterna Verde
839d2e9 HEAD@{7}: commit: Agregamos a Linterna Verde
73584f0 HEAD@{8}: commit (amend): Agregamos historia batman y superman
afda301 HEAD@{9}: commit: Agregamos carpeta historia
af07a98 HEAD@{10}: commit: Agregamos ciudades
7bbed87 HEAD@{11}: commit: Agregamos heroes
412e685 (HEAD -> main) HEAD@{12}: commit: Agregamos misiones
ca98f4f HEAD@{13}: commit (initial): Readme agregado


# volver a rehacer los cambios hasta 0ce9240
git reset --hard d16c757
* d16c757 - (19 minutes ago) Heroes.md: agregamos Linterna verde y ROBIN - vmrvmora (HEAD -> main)
* 73584f0 - (2 hours ago) Agregamos historia batman y superman - vmrvmora
* af07a98 - (2 hours ago) Agregamos ciudades - vmrvmora
* 7bbed87 - (2 hours ago) Agregamos heroes - vmrvmora
* 412e685 - (2 hours ago) Agregamos misiones - vmrvmora
* ca98f4f - (2 hours ago) Readme agregado - vmrvmora



# mover y borrar
git mv ...
git rm ...

git reset --hard ... parecido a git checkout -- .


#### RAMAS creación y switch
git branch rama-villanos
git checkout rama-villanos
... los dos comandos en uno: git checkout -b rama-villanos

... trabajamos en rama-villanos

    git checkout master			... hacemos switch a rama "master"
	git merge rama-villanos		... fusionamos en master los cambios de la otra:    
	git branch -d rama-villanos	... borramos la rama ya fusionada:                  


... deshacer cambios a commit 4i3500w9i0 en fichero miembros.md
	... vemos todos los cambios
	git l
	...
	fasd50fd0d cambios a miembros.md
	4i3500w9i0 cambios a pp.md
	...
	... cogemos el hash de antes del cambio y revertimos los cambios usando dicho hash y el fichero
	git checkout 4i3500w9i0 miembros.md
	git commit -am "..."

# _TAGS
git tag
git tag -a v1_0 -m "Versión v1_0 conectores AD"
git tag -a v0.1.0 a712b50 -m "Versión preliminar"
git show v0.1.0


# _GITHUB y GITLAB
…or create a new repository on the command line
    echo "# udemy-githeroes" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git branch -M main
    git remote add origin https://github.com/vmrvmora/udemy-githeroes.git
    git push -u origin main

	### modificar el remote origin
	git remote set-url origin https://github.com/vmrvmora/LAB-Keycloak.git
	git remote add origin https://github.com/vmrvmora/LAB-Keycloak-bugtracker_multi_idp.git
	git remote add origin https://github.com/vmrvmora/SP-Repositorio.git
	
	... GITLAB
	... alta de usuario en Intellij IDEA 
		... config
		... añadir token generado en gitlab
	... proyecto que estaba apuntando a github, realizo push hacia repo creado en gitlab
	git remote set-url origin https://gitlab.com/keycloak8913748/keycloak-bugtracker-multi-idp.git

…or push an existing repository from the command line
    git remote add origin https://github.com/vmrvmora/udemy-githeroes.git
    git branch -M main
    git push -u origin main     ### -u los próximos push recuerdan esta configuración!!!

    git push --tags             ### subir tags

    git remote -v               ### visualizar los remotos ORIGEN (es una etiqueta)

### Sincronizar datos de GITHUB a local
    git pull                    ###
    git pull origin main        ### si queremos especificar, pero se guarda lo que se especificó en git push -u....

git config --global pull.ff only ## configurar globalmente que en los pull solo queremos que se hagan en modo fastforwar (limpio)
git config --global -e
    [pull]
            ff = only


git config pull.rebase true ##

### Traer cambios con FETCH sin actualizar local del todos
git FETCH   ### normalmente se puede hacer un fetch antes de un pull, para ver como anda la cosa en GITHUB



1. 𝐠𝐢𝐭 𝐝𝐢𝐟𝐟: Show file differences not yet staged.
2. 𝐠𝐢𝐭 𝐜𝐨𝐦𝐦𝐢𝐭 -𝐚 -𝐦 "𝐜𝐨𝐦𝐦𝐢𝐭 𝐦𝐞𝐬𝐬𝐚𝐠𝐞": Commit all tracked changes with a message.
3. 𝐠𝐢𝐭 𝐜𝐨𝐦𝐦𝐢𝐭 --𝐚𝐦𝐞𝐧𝐝: Modify the last commit.
4. 𝐠𝐢𝐭 𝐬𝐭𝐚𝐭𝐮𝐬: Show the state of your working directory.
5. 𝐠𝐢𝐭 𝐚𝐝𝐝 𝐟𝐢𝐥𝐞_𝐩𝐚𝐭𝐡: Add file(s) to the staging area.
6. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐜𝐤𝐨𝐮𝐭 -𝐛 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Create and switch to a new branch.
7. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐜𝐤𝐨𝐮𝐭 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Switch to an existing branch.
8. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐜𝐤𝐨𝐮𝐭 <𝐜𝐨𝐦𝐦𝐢𝐭>: Switches the working directory to a specific commit.
9. 𝐠𝐢𝐭 𝐩𝐮𝐬𝐡 𝐨𝐫𝐢𝐠𝐢𝐧 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Push a branch to a remote.
10. 𝐠𝐢𝐭 𝐩𝐮𝐥𝐥: Fetch and merge remote changes.
11. 𝐠𝐢𝐭 𝐟𝐞𝐭𝐜𝐡: Fetch changes from the remote repository without merging.
12. 𝐠𝐢𝐭 𝐫𝐞𝐛𝐚𝐬𝐞 -𝐢: Rebase interactively, rewrite commit history.
13. 𝐠𝐢𝐭 𝐫𝐞𝐛𝐚𝐬𝐞 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Rebase the current branch onto another branch.
14. 𝐠𝐢𝐭 𝐜𝐥𝐨𝐧𝐞: Create a local copy of a remote repo.
15. 𝐠𝐢𝐭 𝐦𝐞𝐫𝐠𝐞: Merge branches together.
16. 𝐠𝐢𝐭 𝐥𝐨𝐠 --𝐬𝐭𝐚𝐭: Show commit logs with stats.
17. 𝐠𝐢𝐭 𝐬𝐭𝐚𝐬𝐡: Stash changes for later.
18. 𝐠𝐢𝐭 𝐬𝐭𝐚𝐬𝐡 𝐩𝐨𝐩: Apply and remove stashed changes.
19. 𝐠𝐢𝐭 𝐬𝐡𝐨𝐰 𝐜𝐨𝐦𝐦𝐢𝐭_𝐢𝐝: Show details about a commit.
20. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭 𝐇𝐄𝐀𝐃~1: Undo the last commit, preserving changes locally.
21. 𝐠𝐢𝐭 𝐛𝐫𝐚𝐧𝐜𝐡 -𝐃 𝐛𝐫𝐚𝐧𝐜𝐡_𝐧𝐚𝐦𝐞: Delete a branch forcefully.
22. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭: Undo commits by moving branch reference.
23. 𝐠𝐢𝐭 𝐫𝐞𝐯𝐞𝐫𝐭 𝐜𝐨𝐦𝐦𝐢𝐭_𝐢𝐝: Create a new commit that undoes the changes of a specific commit.
24. 𝐠𝐢𝐭 𝐜𝐡𝐞𝐫𝐫𝐲-𝐩𝐢𝐜𝐤 𝐜𝐨𝐦𝐦𝐢𝐭_𝐢𝐝: Apply changes from a specific commit.
24. 𝐠𝐢𝐭 𝐛𝐫𝐚𝐧𝐜𝐡: Lists branches.
26. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭 --𝐬𝐨𝐟𝐭 𝐇𝐄𝐀𝐃^: Undo the last commit, but keep the changes.
27. 𝐠𝐢𝐭 𝐫𝐞𝐬𝐞𝐭 --𝐡𝐚𝐫𝐝: Resets everything to a previous commit, erasing all uncommitted changes.
28: 𝐠𝐢𝐭 𝐛𝐫𝐚𝐧𝐜𝐡 --𝐬𝐞𝐭-𝐮𝐩𝐬𝐭𝐫𝐞𝐚𝐦-𝐭𝐨 𝐫𝐞𝐦𝐨𝐭𝐞_𝐛𝐫𝐚𝐧𝐜𝐡: Sets the upstream branch to the specified 

